{"version":3,"sources":["cardUtils.ts","useCardState.tsx","Divider.tsx","Card.tsx","CardsChooser.tsx","portCppModule.ts","loadCppModule.ts","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RANKS","value","label","isJoker","map","data","RANK","reduce","rankIndex","rank","SUIT","H","color","D","S","C","B","R","SUITS","SUITS_JOKER","ALL_CARDS_ONE_DECK","suit","flatMap","cards","cardCompare","a","b","rankA","findIndex","rankB","Error","generateRandomHands","i","length","j","Math","floor","random","x","shuffle","concat","Object","toConsumableArray","slice","sort","canIAddCard","cardToAdd","filter","card","RankChooser","_ref","setRank","react_default","createElement","View","style","flexDirection","Text","fontSize","marginHorizontal","Picker","selectedValue","onValueChange","itemValue","rankOption","Item","key","styles","StyleSheet","create","divider","height","backgroundColor","Divider","Card","isStacked","disabled","rankDef","suitDef","cardStacked","fontFamily","lineHeight","textAlign","width","marginTop","fontWeight","split","join","position","left","right","top","bottom","CardDeck","_ref2","hands","ScrollView","flex","minHeight","contentContainerStyle","flexWrap","paddingRight","paddingBottom","overflow","index","assign","hand","handID","handNode","cardID","react","palette","0","4","6","8","theme","background","text","button","MyButton","titleStyle","title","restProps","objectWithoutProperties","TouchableOpacity","borderRadius","padding","alignItems","justifyContent","controlStyles","incDecButton","minWidth","maxWidth","margin","actionButton","buttonTitle","buttonTitleSmall","ControlPanel","props","alignContent","CardsChooser_MyButton","onPress","randomCards","numberOfCards","clearCards","decRank","rankID","incRank","deleteLastCard","CardsChooser","addCard","_useIncDecState","defaultValue","arguments","undefined","_useState","useState","_useState2","slicedToArray","setValue","increase","useCallback","valueNow","decrease","useIncDecState","Card_CardDeck","flexGrow","horizontal","canIAddThisCard","CardsChooser_ControlPanel","borderColor","borderWidth","marginRight","marginBottom","portCppModule","cppModule","calc","mainRank","_cppModule$calc","charCodeAt","minHands","solutionsRaw","vec","arr","size","push","get","vector2Array","solutions","parseSolutions","cardRegex","restoreWildCards","usedWildCards","wildCard","wildCardsToUse","restoredHands","forEach","foundCardID","indexOf","splice","newHand","parsedSolutions","wildCards","wildCardsRawStr","str","match","handsRawStr","asHands","foundCards","actualHands","console","log","parseSolutionsUnsafe","e","strategyModule","container","borderBox","SolutionVisualization","strategyResult","isWindowMaxed","toggleWindowSize","Fragment","solution","solutionIndex","cardRaw","parseRawCard","Home","screenProps","useEffect","Promise","resolve","reject","window","Module","s","document","src","onload","onRuntimeInitialized","onAbort","onerror","body","appendChild","then","setResult","_useState3","_useState4","isResultWindowMaxed","setResultWindowState","toggleResultWindowSize","prevState","Home_SolutionVisualization","Button","setTimeout","cardsStr","cardsToString","navigationOptions","AppNavigator","createSwitchNavigator","Details","navigation","navigate","initialRouteName","App","cardStateProps","setCards","cardsNow","useCardState","objectSpread","router","createBrowserApp","Boolean","location","hostname","AppRegistry","registerComponent","runApplication","rootTag","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+MAEaA,EAAQ,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CACEC,MAAO,IACPC,MAAO,KACPC,SAAS,GAEX,IACA,IACA,IACA,IACA,CACEF,MAAO,IACPC,MAAO,QACPC,SAAS,IAEXC,IAAI,SAAAC,GACJ,GAAoB,kBAATA,EACT,OAAOA,EAGP,MAAO,CACLH,MAFWG,EAGXJ,MAHWI,EAIXF,SAAS,KAWFG,EAAkBN,EAAMO,OAAO,SAACC,EAAsBC,GAEjE,OADAD,EAAUC,EAAKR,OAASQ,EACjBD,GACN,IAQUE,EAAmB,CAC9BC,EAAG,CACDV,MAAO,IACPC,MAAO,SACPU,MAAO,OAETC,EAAG,CACDZ,MAAO,IACPC,MAAO,SACPU,MAAO,OAETE,EAAG,CACDb,MAAO,IACPC,MAAO,SACPU,MAAO,SAETG,EAAG,CACDd,MAAO,IACPC,MAAO,SACPU,MAAO,SAETI,EAAG,CAEDf,MAAO,IACPC,MAAO,GACPU,MAAO,SAETK,EAAG,CAEDhB,MAAO,IACPC,MAAO,GACPU,MAAO,QAGEM,EAAQ,CAACR,EAAKC,EAAGD,EAAKI,EAAGJ,EAAKK,EAAGL,EAAKG,GACtCM,EAAc,CAACT,EAAKM,EAAGN,EAAKO,GAEnCG,EAA8BpB,EAAMI,IAAI,SAAAK,GAAI,OAChDA,EAAKN,QACDgB,EAAYf,IAAI,SAAAiB,GAAI,MAAK,CACvBZ,KAAMA,EAAKR,MACXoB,KAAMA,EAAKpB,SAEbiB,EAAMd,IAAI,SAAAiB,GAAI,MAAK,CACjBZ,KAAMA,EAAKR,MACXoB,KAAMA,EAAKpB,WAEjBqB,QAAQ,SAAAC,GAAK,OAAIA,IAiBnB,SAASC,EAAYC,EAAUC,GAC7B,IAAMC,EAAQ3B,EAAM4B,UAAU,SAAAnB,GAAI,OAAIA,EAAKR,QAAUwB,EAAEhB,OACjDoB,EAAQ7B,EAAM4B,UAAU,SAAAnB,GAAI,OAAIA,EAAKR,QAAUyB,EAAEjB,OACvD,IAAe,IAAXkB,IAA2B,IAAXE,EAClB,MAAM,IAAIC,MAAM,6BAA+BL,EAAI,IAAMC,GAE3D,OAAIC,IAAUE,EACLF,EAAQE,EAGVJ,EAAEJ,KAAOK,EAAEL,MAAQ,EAAII,EAAEJ,OAASK,EAAEL,KAAO,EAAI,EAWjD,SAASU,IACd,OAhCF,SAAoBN,GAClB,IAAK,IAAIO,EAAIP,EAAEQ,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAIb,EAAEO,GACZP,EAAEO,GAAKP,EAAES,GACTT,EAAES,GAAKI,EAET,OAAOb,EAyBUc,CAAO,GAAAC,OAAAC,OAAAC,EAAA,EAAAD,CAAKrB,GAALqB,OAAAC,EAAA,EAAAD,CAA4BrB,KAAqBuB,MAAM,EAAG,IAJzEC,KAAKpB,GAOT,SAASqB,EAAYtB,EAAgBuB,GAC1C,OAAOvB,EAAMwB,OAAO,SAAAC,GAAI,OAZK,IAAtBxB,EAY+BwB,EAAMF,KAAYb,OAAS,ECrH5D,SAASgB,EAATC,GAAmD,IAA5BzC,EAA4ByC,EAA5BzC,KAAM0C,EAAsBD,EAAtBC,QAClC,OACEC,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CACEC,MAAO,CACLC,cAAe,QAGjBJ,EAAA3B,EAAA4B,cAACI,EAAA,EAAD,CAAMF,MAAO,CAAEG,SAAU,GAAIC,iBAAkB,IAA/C,qBAEEP,EAAA3B,EAAA4B,cAACO,EAAA,EAAD,CACEC,cAAepD,EACfqD,cAAe,SAAAC,GAAS,OAAIZ,EAAQY,KAEnC/D,EAAM+C,OAAO,SAAAiB,GAAU,OAAKA,EAAW7D,UAASC,IAAI,SAAA4D,GAAU,OAC7DZ,EAAA3B,EAAA4B,cAACO,EAAA,EAAOK,KAAR,CACEC,IAAKF,EAAW/D,MAChBC,MAAO8D,EAAW9D,MAClBD,MAAO+D,EAAW/D,WAGd,IACVmD,EAAA3B,EAAA4B,cAACI,EAAA,EAAD,CAAMF,MAAO,CAAE3C,MAAOF,EAAKC,EAAEC,QAC1BF,EAAKC,EAAET,MACPI,EAAKG,GAAMP,OAhBhB,2DChCAiE,EAASC,IAAWC,OAAO,CAC/BC,QAAS,CACPC,OAAQ,IACRC,gBAAiB,WAId,SAASC,IACd,OAAOrB,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAMC,MAAOY,EAAOG,UCLtB,SAASI,EAATxB,GAQJ,IAPDzC,EAOCyC,EAPDzC,KACAY,EAMC6B,EAND7B,KACAsD,EAKCzB,EALDyB,UACAC,EAIC1B,EAJD0B,SAKMC,EAAUvE,EAAKG,GACfqE,EAAUpE,EAAKW,GACrB,OACE+B,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAMC,MAAO,CAACY,EAAOnB,KAAM2B,GAAaR,EAAOY,cAC7C3B,EAAA3B,EAAA4B,cAACI,EAAA,EAAD,CACEF,MAAO,CACLyB,WAAY,YACZtB,SAAU,GACV9C,MAAOkE,EAAQlE,MACfqE,WAAY,GACZC,UAAW,SACXC,MAAO,GACPC,UAAW,EACXC,WAAY,SAGK,OAAlBR,EAAQ3E,MACL2E,EAAQ3E,MACR2E,EAAQ3E,MAAMoF,MAAM,IAAIC,KAAK,MAChC,KACAT,EAAQ5E,OAEV0E,GACCxB,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CACEC,MAAO,CACLiC,SAAU,WACVC,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,OAAQ,EACRpB,gBAAiB,yBAatB,IAAMqB,EAAmD,SAAAC,GAG1D,IAFJvE,EAEIuE,EAFJvE,MACAwE,EACID,EADJC,MAEA,OACE3C,EAAA3B,EAAA4B,cAAC2C,EAAA,EAAD,CACEzC,MAAO,CACL0C,KAAM,EACNC,UAAW,IAEbC,sBAAuB,CACrBC,SAAU,OACV5C,cAAe,MACf6C,aAAc,GACdC,cAAe,GACfC,SAAU,aAGThF,GACDA,EAAMnB,IAAI,SAAC4C,EAAMwD,GAAP,OACRpD,EAAA3B,EAAA4B,cAACqB,EAADjC,OAAAgE,OAAA,CAAMvC,IAAKlB,EAAKvC,KAAOuC,EAAK3B,KAAOmF,GAAWxD,EAA9C,CAAoD2B,WAAS,SAE9DoB,GACDA,EAAM3F,IAAI,SAACsG,EAAMC,GACf,IAAMC,EAAWF,EAAKtG,IAAI,SAAC4C,EAAM6D,GAAP,OACxBzD,EAAA3B,EAAA4B,cAACqB,EAADjC,OAAAgE,OAAA,CAAMvC,IAAKlB,EAAKvC,KAAOuC,EAAK3B,KAAOwF,GAAY7D,EAA/C,CAAqD2B,WAAS,OAGhE,OAAIgC,EAAS,EAGTvD,EAAA3B,EAAA4B,cAACyD,EAAA,SAAD,CAAU5C,IAAKyC,GACbvD,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAE4B,MAAO,MACtB/B,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,cAAe,MAAO4C,SAAU,WAC5CQ,IAKAA,MC5EbG,EACE,oBADFA,EAEE,CACJC,EAAG,QACHC,EAAG,qBACHC,EAAG,qBACHC,EAAG,SAIDC,EAAQ,CACZxC,SAAU,CACRyC,WAAYN,EAAa,GACzBO,KAAMP,EAAa,IAErBQ,OAAQ,CACNF,WAAYN,IAyBhB,IAAMS,EAA6C,SAAAtE,GAAA,IACjDK,EADiDL,EACjDK,MACAkE,EAFiDvE,EAEjDuE,WACAC,EAHiDxE,EAGjDwE,MACA9C,EAJiD1B,EAIjD0B,SACG+C,EAL8ClF,OAAAmF,EAAA,EAAAnF,CAAAS,EAAA,kDAOjDE,EAAA3B,EAAA4B,cAACwE,EAAA,EAADpF,OAAAgE,OAAA,CACElD,MAAO,CACL,CACEiB,gBAAiBI,EACbwC,EAAMxC,SAASyC,WACfD,EAAMG,OAAOF,WACjBS,aAAc,EACdC,QAAS,EACTC,WAAY,SACZC,eAAgB,UAElB1E,GAEFqB,SAAUA,GACN+C,GAEJvE,EAAA3B,EAAA4B,cAACI,EAAA,EAAD,CACEF,MAAO,CACL,CACE3C,MAAOgE,EAAWwC,EAAMxC,SAAS0C,KAAO,QACxCpC,UAAW,UAEbuC,IAGDC,KAKDQ,EAAgB9D,IAAWC,OAAO,CACtC8D,aAAc,CACZlC,KAAM,EACNmC,SAAU,GACVC,SAAU,IACVC,OAAQ,GAEVC,aAAc,CACZtC,KAAM,EACNmC,SAAU,GACVC,SAAU,IACVC,OAAQ,GAEVE,YAAa,CACX9E,SAAU,IAEZ+E,iBAAkB,CAChB/E,SAAU,MAYRgF,EAA2D,SAAAC,GAAK,OACpEvF,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,KACEF,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CACEC,MAAO,CACLC,cAAe,MACfyE,eAAgB,SAChBW,aAAc,WAGhBxF,EAAA3B,EAAA4B,cAACwF,EAAD,CACEC,QAASH,EAAMI,YACfrB,MAAM,2BACN9C,SAAU+D,EAAMK,cAAgB,EAChCzF,MAAO2E,EAAcK,aACrBd,WAAYS,EAAcO,mBAE5BrF,EAAA3B,EAAA4B,cAACwF,EAAD,CACEC,QAASH,EAAMM,WACfvB,MAAM,eACN9C,SAAkC,IAAxB+D,EAAMK,cAChBzF,MAAO2E,EAAcK,aACrBd,WAAYS,EAAcM,cAE5BpF,EAAA3B,EAAA4B,cAACwF,EAAD,CACEC,QAASH,EAAMO,QACftE,SAAU+D,EAAMQ,QAAU,EAC1BzB,MAAM,IACNnE,MAAO2E,EAAcC,aACrBV,WAAYS,EAAcM,cAE5BpF,EAAA3B,EAAA4B,cAACwF,EAAD,CACEC,QAASH,EAAMS,QACf1B,MAAM,IACN9C,SAAU+D,EAAMQ,QAAUnJ,EAAMiC,OAAS,EACzCsB,MAAO2E,EAAcC,aACrBV,WAAYS,EAAcM,eAG9BpF,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CACEC,MAAO,CACLC,cAAe,MACfyE,eAAgB,SAChBW,aAAc,WAGhBxF,EAAA3B,EAAA4B,cAACwF,EAAD,CACEC,QAASH,EAAMU,eACf3B,MAAM,2BACN9C,SAAkC,IAAxB+D,EAAMK,cAChBzF,MAAO2E,EAAcK,aACrBd,WAAYS,EAAcM,iBAM3B,SAASc,EAATxD,GAMO,IALZvE,EAKYuE,EALZvE,MACAgI,EAIYzD,EAJZyD,QACAN,EAGYnD,EAHZmD,WACAF,EAEYjD,EAFZiD,YACAM,EACYvD,EADZuD,eACYG,EArJd,WAA0C,IAAlBC,EAAkBC,UAAAzH,OAAA,QAAA0H,IAAAD,UAAA,GAAAA,UAAA,GAAH,EAAGE,EACdC,mBAASJ,GADKK,EAAArH,OAAAsH,EAAA,EAAAtH,CAAAmH,EAAA,GACjC3J,EADiC6J,EAAA,GAC1BE,EAD0BF,EAAA,GASxC,MAAO,CACL7J,QACAgK,SATeC,sBAAY,kBAAMF,EAAS,SAAAG,GAAQ,OAAIA,EAAW,KAAI,CACrEH,IASAI,SAPeF,sBAAY,kBAAMF,EAAS,SAAAG,GAAQ,OAAIA,EAAW,KAAI,CACrEH,KAoJEK,GAHKlB,EAFGK,EAEVvJ,MACUmJ,EAHAI,EAGVS,SACUf,EAJAM,EAIVY,SAGF,OACEhH,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAE0C,KAAM,IACnB7C,EAAA3B,EAAA4B,cAACiH,EAAD,CAAU/I,MAAOA,IACjB6B,EAAA3B,EAAA4B,cAACoB,EAAD,MACArB,EAAA3B,EAAA4B,cAAC2C,EAAA,EAAD,CACEzC,MAAO,CAAEgB,OAAQ,IAAKgG,SAAU,GAChCpE,sBAAuB,CACrBF,KAAM,EACNgC,eAAgB,UAElBuC,YAAU,IAERxK,EAAMmJ,GAAQhJ,QAAUgB,EAAcD,GAAOd,IAAI,SAAAiB,GACjD,IAAM2B,EAAO,CACX3B,KAAMA,EAAKpB,MACXQ,KAAMT,EAAMmJ,GAAQlJ,OAEhBwK,EAAkB5H,EAAYtB,EAAOyB,GAE3C,OACEI,EAAA3B,EAAA4B,cAACwE,EAAA,EAAD,CACE3D,IAAK7C,EAAKpB,MACV6I,QAAS,kBAAMS,EAAQvG,IACvB4B,UAAW6F,GAEXrH,EAAA3B,EAAA4B,cAACqB,EAAD,CAAMrD,KAAMA,EAAKpB,MAAOQ,KAAMT,EAAMmJ,GAAQlJ,MAAO2E,UAAW6F,QAKtErH,EAAA3B,EAAA4B,cAACqH,EAAD,CACE1B,cAAezH,EAAMU,OACrBgH,WAAYA,EACZF,YAAaA,EACbM,eAAgBA,EAChBF,OAAQA,EACRC,QAASA,EACTF,QAASA,KAMV,IAAM/E,EAASC,IAAWC,OAAO,CACtCrB,KAAM,CACJmC,MAAO,GACPZ,OAAQ,GAAK,MACbC,gBAAiB,QACjBmG,YAAa,QACbC,YAAa,EACbtC,OAAQ,GAEVvD,YAAa,CACX8F,aAAc,GACdC,cAAe,MCzPZ,SAASC,EAAcC,GAC5B,MAAO,CACLC,KAAM,SAAC1J,EAAe2J,GAAqC,IAAAC,EACNH,EAAUC,KAC3D1J,EACA2J,EAASE,WAAW,IAFdC,EADiDF,EACjDE,SAIFC,ECkCL,SAAsBC,GAE3B,IADA,IAAMC,EAAM,GACHxJ,EAAI,EAAGA,EAAIuJ,EAAIE,SAAUzJ,EAChCwJ,EAAIE,KAAKH,EAAII,IAAI3J,IAGnB,OAAOwJ,EDxCkBI,CALoCT,EACvCU,WAMlB,MAAO,CACLR,WACAC,eACAO,UAAWC,EAAeR,MAMlC,IAAMS,EAAY,cAGX,SAASC,EACdjG,EACAkG,EACAC,GAEA,IAAMC,EAAc1J,OAAAC,EAAA,EAAAD,CAAOwJ,GACrBG,EAAa3J,OAAAC,EAAA,EAAAD,CAAOsD,GAgB1B,GAdAA,EAAMsG,QAAQ,SAAC3F,EAAMC,GACnBD,EAAK2F,QAAQ,SAACrJ,EAAM6D,GAClB,GAAIsF,EAAelK,OAAS,EAAG,CAC7B,IAAMqK,EAAcH,EAAeI,QAAQvJ,GAC3C,GAAIsJ,GAAe,EAAG,CACpBH,EAAeK,OAAOF,EAAa,GACnC,IAAMG,EAAOhK,OAAAC,EAAA,EAAAD,CAAO2J,EAAczF,IAClC8F,EAAQD,OAAO3F,EAAQ,EAAGqF,GAC1BE,EAAczF,GAAU8F,QAM5BN,EAAelK,OAAS,EAC1B,MAAM,IAAIH,MAAJ,8DAAAU,OAC0DuD,EAD1D,wBAAAvD,OACsFyJ,EADtF,iBAAAzJ,OACmH0J,EADnH,MAKR,OAAOE,EAGF,SAASN,EAAeD,GAC7B,IACE,OAOG,SAA8BA,GAInC,IAHA,IAAMa,EAAkB,GACpBC,EAA6B,KAExB3K,EAAI,EAAGA,EAAI6J,EAAU5J,SAAUD,EAAG,CACzC,GAA4B,IAAxB6J,EAAU7J,GAAGC,OACf,MAAM,IAAIH,MAAM,yCAA2CE,GAG7D,GAAwB,MAApB6J,EAAU7J,GAAG,GAAY,CAE3B,IAAM4K,EAAkBf,EAAU7J,GAClC2K,EAAYC,EAAgBtH,MAAM,KAAKvC,OAAO,SAAA8J,GAAG,OAAIA,EAAIC,MAAMf,SAC1D,CAEL,GAAiB,MAAbY,EACF,MAAM,IAAI7K,MACR,4DAIJ,IAAMiL,EAAclB,EAAU7J,GACxBgL,EAAUD,EACbzH,MAAM,KACNlF,IAAI,SAAAsG,GAAI,OAAIA,EAAKpB,MAAM,KAAKvC,OAAO,SAAA8J,GAAG,OAAIA,EAAIC,MAAMf,OACpDhJ,OAAO,SAAAkK,GAAU,OAAIA,EAAWhL,OAAS,IACtCiL,EAAclB,EAAiBgB,EAASL,EAAW,MAEzDD,EAAgBhB,KAAK,CACnBiB,YACAO,cACAF,aAMN,OAFAG,QAAQC,IAAIV,GAELA,EA5CEW,CAAqBxB,GAC5B,MAAOyB,GAEP,MADAH,QAAQC,IAAIvB,GACNyB,GEtCV,IAAIC,EAAyC,KAyC7C,IAAMpJ,EAASC,IAAWC,OAAO,CAC/BmJ,UAAW,CACTzF,QAAS,IAEX0F,UAAW,CACT7C,YAAa,EACbD,YAAa,WAWX+C,EAEF,SAAAxK,GAAA,IAAGyK,EAAHzK,EAAGyK,eAAgBlN,EAAnByC,EAAmBzC,KAAMmN,EAAzB1K,EAAyB0K,cAAeC,EAAxC3K,EAAwC2K,iBAAxC,OACFzK,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAAqM,SAAA,KACE1K,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CACEC,MAAO,CACLC,cAAe,MACfyE,eAAgB,WAChBW,aAAc,WAGhBxF,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAE0C,KAAM,IACnB7C,EAAA3B,EAAA4B,cAACI,EAAA,EAAD,CACEF,MAAO,CACLG,SAAU,GACVqE,QAAS,EACT7C,UAAW,WAJf,qDAUF9B,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAE4B,MAAO,EAAGX,gBAAiB,WAC1CpB,EAAA3B,EAAA4B,cAACwE,EAAA,EAAD,CACEtE,MAAO,CACL4B,MAAO,GACPyD,aAAc,SACdX,eAAgB,UAElBa,QAAS+E,GAETzK,EAAA3B,EAAA4B,cAACI,EAAA,EAAD,CAAMF,MAAO,CAAE2B,UAAW,WAAa0I,EAAgB,eAAO,kBAGlExK,EAAA3B,EAAA4B,cAACoB,EAAD,MACArB,EAAA3B,EAAA4B,cAAC2C,EAAA,EAAD,CACEzC,MAAO,CACLY,EAAOqJ,UACP,CACEvH,KAAM,KAIT0H,IACqB,YAAnBA,EACCvK,EAAA3B,EAAA4B,cAACI,EAAA,EAAD,CACEF,MAAO,CACLG,SAAU,KAFd,yBAQAN,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAAqM,SAAA,KACE1K,EAAA3B,EAAA4B,cAACI,EAAA,EAAD,oBAAAjB,OAAYmL,EAAetC,SAA3B,mCACAjI,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,KACGqK,EAAe9B,UAAUzL,IAAI,SAAC2N,EAAUC,GAAX,OAC5B5K,EAAA3B,EAAA4B,cAACiH,EAAD,CACEpG,IAAK8J,EACLjI,MAAOgI,EAASb,YAAY9M,IAAI,SAAAsG,GAAI,OAClCA,EAAKtG,IAAI,SAAA4C,GAAI,OAxGjC,SAAsBiL,EAAkB/B,GACtC,GAAuB,IAAnB+B,EAAQhM,OACV,MAAM,IAAIH,MAAM,qCAGlB,MAAgB,OAAZmM,EACK,CACLxN,KAAM,IACNY,KAAM,KAGM,OAAZ4M,EACK,CACLxN,KAAM,IACNY,KAAM,KAGM,OAAZ4M,EACK/B,EAGF,CACLzL,KAAMwN,EAAQ,GACd5M,KAAM4M,EAAQ,IAkFIC,CAAalL,EAAM,CACjBvC,OACAY,KAAM,oBAevB,SAAS8M,EAATrI,GAAgD,IAAhCsI,EAAgCtI,EAAhCsI,YACrBC,oBAAU,WDzGH,IAAIC,QAAQ,SAACC,EAASC,GAC3B,GAAIC,OAAOC,OACT,OAAOH,EAAQxD,EAAc0D,OAAOC,SAEpC,IAAMC,EAAIC,SAASvL,cAAc,UACjCsL,EAAEE,IAAM,kBACRF,EAAEG,OAAS,WACT,IAAM9D,EAAYyD,OAAOC,OACzB1D,EAAU+D,qBAAuB,WAC/BR,EAAQxD,EAAc0D,OAAOC,UAE/B1D,EAAUgE,QAAU,WAClBR,EAAO,wCAGXG,EAAEM,QAAU,kBAAMT,EAAO,+BACzBI,SAASM,KAAKC,YAAYR,KC0FZS,KAAK,SAAApE,GACnBuC,EAAiBvC,KASlB,IAZkD,IAenDvK,EAOE2N,EAPF3N,KACA0C,EAMEiL,EANFjL,QACA5B,EAKE6M,EALF7M,MACA0H,EAIEmF,EAJFnF,WACAM,EAGE6E,EAHF7E,QACAR,EAEEqF,EAFFrF,YACAM,EACE+E,EADF/E,eArBmDO,EAuBjBC,mBAA8B,MAvBbC,EAAArH,OAAAsH,EAAA,EAAAtH,CAAAmH,EAAA,GAuB9C+D,EAvB8C7D,EAAA,GAuB9BuF,EAvB8BvF,EAAA,GAAAwF,EAwBDzF,oBAAkB,GAxBjB0F,EAAA9M,OAAAsH,EAAA,EAAAtH,CAAA6M,EAAA,GAwB9CE,EAxB8CD,EAAA,GAwBzBE,EAxByBF,EAAA,GAyB/CG,EAAyBxF,sBAC7B,kBAAMuF,EAAqB,SAAAE,GAAS,OAAKA,KACzC,CAACF,IAGH,OACErM,EAAA3B,EAAA4B,cAAC2C,EAAA,EAAD,CACEzC,MAAO,CAACY,EAAOsJ,UAAW,CAAElJ,OAAQ,SACpC4B,sBAAuB,CACrB5B,OAAQ,SAGVnB,EAAA3B,EAAA4B,cAACuM,EAAD,CACEjC,eAAgBA,EAChBlN,KAAMA,EACNmN,cAAe4B,EACf3B,iBAAkB6B,KAElBF,GACApM,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAAqM,SAAA,KACE1K,EAAA3B,EAAA4B,cAACoB,EAAD,MACArB,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CACEC,MAAO,CACLY,EAAOqJ,UACP,CACEjJ,OAAQ,GACR0D,eAAgB,SAChBD,WAAY,YAIhB5E,EAAA3B,EAAA4B,cAACJ,EAAD,CAAaxC,KAAMA,EAAM0C,QAASA,KAEpCC,EAAA3B,EAAA4B,cAACoB,EAAD,MACArB,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CACEC,MAAO,CACLY,EAAOqJ,UACP,CACEvH,KAAM,EACNC,UAAW,OAIf9C,EAAA3B,EAAA4B,cAACiG,EAAD,CACE/H,MAAOA,EACPgI,QAASA,EACTN,WAAYA,EACZF,YAAaA,EACbM,eAAgBA,KAGpBjG,EAAA3B,EAAA4B,cAACoB,EAAD,MACArB,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CACEC,MAAO,CACLY,EAAOqJ,UACP,CACEjJ,OAAQ,GACR0D,eAAgB,SAChBF,QAAS,KAIb3E,EAAA3B,EAAA4B,cAACwM,EAAA,EAAD,CACEnI,MAAM,2BACNoB,QAAS,WACPuG,EAAU,WAEVS,WAAW,WACT,GAAsB,MAAlBvC,EAAwB,CAC1B,IAAMwC,EApO1B,SAAuBxO,GACrB,OAAOA,EACJnB,IAAI,SAAA4C,GACH,MAAkB,MAAdA,EAAKvC,KAEc,MAAduC,EAAK3B,KAAe,KAAO,KAE7B2B,EAAKvC,KAAOuC,EAAK3B,OAEzBkE,KAAK,IA2N2ByK,CAAczO,GAC/B4L,QAAQC,IAAI2C,GACZV,EAAU9B,EAAetC,KAAK8E,EAAUtP,MAEzC,SAUnB0N,EAAK8B,kBAAoB,CACvBvI,MAAO,wCCpPT,IAAMwI,EAAeC,gCACnB,CACEhC,OACAiC,QAfJ,SAAiBzH,GACf,OACEvF,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,KACEF,EAAA3B,EAAA4B,cAACI,EAAA,EAAD,gBACAL,EAAA3B,EAAA4B,cAACwM,EAAA,EAAD,CACEnI,MAAM,aACNoB,QAAS,kBAAMH,EAAM0H,WAAWC,SAAS,cAW/C,CACEC,iBAAkB,SAItB,SAASC,EAAI7H,GAAY,IAAAiB,EACCC,mBAAS,KADVC,EAAArH,OAAAsH,EAAA,EAAAtH,CAAAmH,EAAA,GAChBnJ,EADgBqJ,EAAA,GACV3G,EADU2G,EAAA,GAEjB2G,EP7BD,WAAmC,IAAA7G,EACdC,mBAAkB,IADJC,EAAArH,OAAAsH,EAAA,EAAAtH,CAAAmH,EAAA,GACjCrI,EADiCuI,EAAA,GAC1B4G,EAD0B5G,EAAA,GAcxC,MAAO,CACLvI,QACA0H,WAdiBiB,sBAAY,kBAAMwG,EAAS,KAAK,CAACA,IAelDnH,QAdcW,sBACd,SAAAlH,GAAI,OAAI0N,EAAS,SAAAC,GAAQ,OAAIA,EAASnO,OAAOQ,MAC7C,CAAC0N,IAaD3H,YAXkBmB,sBAAY,kBAAMwG,EAAS3O,MAAwB,CACrE2O,IAWArH,eATqBa,sBACrB,kBAAMwG,EAAS,SAAAC,GAAQ,OAAIA,EAAShO,MAAM,EAAGgO,EAAS1O,OAAS,MAC/D,CAACyO,KOiBoBE,GAEvB,OACExN,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CACEC,MAAO,CACL0C,KAAM,EACNzB,gBAAiB,YACjBD,OAAQ,SAGVnB,EAAA3B,EAAA4B,cAAC6M,EAADzN,OAAAgE,OAAA,CACE2H,YAAW3L,OAAAoO,EAAA,EAAApO,CAAA,CAAIhC,OAAM0C,WAAYsN,IAC7B9H,KAKZ6H,EAAIM,OAASZ,EAAaY,OAEXC,iCAAiBP,GCzCZQ,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASpE,MACvB,2DCbNqE,IAAYC,kBAAkB,MAAO,kBAAMZ,IAC3CW,IAAYE,eAAe,MAAO,CAChCC,QAAS1C,SAAS2C,eAAe,UDkI7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.48ee64aa.chunk.js","sourcesContent":["import { TCard } from './types'\r\n\r\nexport const RANKS = [\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  {\r\n    value: '0',\r\n    label: '10',\r\n    isJoker: false,\r\n  },\r\n  'J',\r\n  'Q',\r\n  'K',\r\n  'A',\r\n  {\r\n    value: 'X',\r\n    label: 'Joker',\r\n    isJoker: true,\r\n  },\r\n].map(data => {\r\n  if (typeof data === 'object') {\r\n    return data\r\n  } else {\r\n    const rank = data\r\n    return {\r\n      label: rank,\r\n      value: rank,\r\n      isJoker: false,\r\n    }\r\n  }\r\n})\r\ninterface RankIndex {\r\n  [rank: string]: {\r\n    value: string\r\n    label: string\r\n    isJoker: boolean\r\n  }\r\n}\r\nexport const RANK: RankIndex = RANKS.reduce((rankIndex: RankIndex, rank) => {\r\n  rankIndex[rank.value] = rank\r\n  return rankIndex\r\n}, {})\r\ninterface SuiteIndex {\r\n  [suit: string]: {\r\n    value: string\r\n    label: string\r\n    color: string\r\n  }\r\n}\r\nexport const SUIT: SuiteIndex = {\r\n  H: {\r\n    value: 'H',\r\n    label: '♥',\r\n    color: 'red',\r\n  },\r\n  D: {\r\n    value: 'D',\r\n    label: '♦',\r\n    color: 'red',\r\n  },\r\n  S: {\r\n    value: 'S',\r\n    label: '♠',\r\n    color: 'black',\r\n  },\r\n  C: {\r\n    value: 'C',\r\n    label: '♣',\r\n    color: 'black',\r\n  },\r\n  B: {\r\n    // black joker\r\n    value: 'B',\r\n    label: '',\r\n    color: 'black',\r\n  },\r\n  R: {\r\n    // red joker\r\n    value: 'R',\r\n    label: '',\r\n    color: 'red',\r\n  },\r\n}\r\nexport const SUITS = [SUIT.H, SUIT.S, SUIT.C, SUIT.D]\r\nexport const SUITS_JOKER = [SUIT.B, SUIT.R]\r\n\r\nconst ALL_CARDS_ONE_DECK: TCard[] = RANKS.map(rank =>\r\n  rank.isJoker\r\n    ? SUITS_JOKER.map(suit => ({\r\n        rank: rank.value,\r\n        suit: suit.value,\r\n      }))\r\n    : SUITS.map(suit => ({\r\n        rank: rank.value,\r\n        suit: suit.value,\r\n      })),\r\n).flatMap(cards => cards)\r\n\r\n/**\r\n * reference: https://stackoverflow.com/a/6274381\r\n * Shuffles array in place.\r\n * @param {Array} a items An array containing the items.\r\n */\r\nfunction shuffle<T>(a: T[]): T[] {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n    const x = a[i]\r\n    a[i] = a[j]\r\n    a[j] = x\r\n  }\r\n  return a\r\n}\r\n\r\nfunction cardCompare(a: TCard, b: TCard): number {\r\n  const rankA = RANKS.findIndex(rank => rank.value === a.rank)\r\n  const rankB = RANKS.findIndex(rank => rank.value === b.rank)\r\n  if (rankA === -1 || rankB === -1) {\r\n    throw new Error('rank not found for cards, ' + a + ' ' + b)\r\n  }\r\n  if (rankA !== rankB) {\r\n    return rankA - rankB\r\n  }\r\n\r\n  return a.suit < b.suit ? -1 : a.suit === b.suit ? 0 : 1\r\n}\r\n\r\nfunction cardEqual(a: TCard, b: TCard): boolean {\r\n  return cardCompare(a, b) === 0\r\n}\r\n\r\nfunction sortCards(a: TCard[]): TCard[] {\r\n  return a.sort(cardCompare)\r\n}\r\n\r\nexport function generateRandomHands(): TCard[] {\r\n  return sortCards(shuffle([...ALL_CARDS_ONE_DECK, ...ALL_CARDS_ONE_DECK]).slice(0, 27))\r\n}\r\n\r\nexport function canIAddCard(cards: TCard[], cardToAdd: TCard): boolean {\r\n  return cards.filter(card => cardEqual(card, cardToAdd)).length < 2\r\n}\r\n","import React, { useState, useCallback } from 'react'\r\nimport { View, Text, Picker } from 'react-native'\r\nimport { RANKS, RANK, SUIT, generateRandomHands } from './cardUtils'\r\nimport { CardState, RankState, TCard } from './types'\r\n\r\nexport function useCardState(): CardState {\r\n  const [cards, setCards] = useState<TCard[]>([])\r\n  const clearCards = useCallback(() => setCards([]), [setCards])\r\n  const addCard = useCallback(\r\n    card => setCards(cardsNow => cardsNow.concat(card)),\r\n    [setCards],\r\n  )\r\n  const randomCards = useCallback(() => setCards(generateRandomHands()), [\r\n    setCards,\r\n  ])\r\n  const deleteLastCard = useCallback(\r\n    () => setCards(cardsNow => cardsNow.slice(0, cardsNow.length - 1)),\r\n    [setCards],\r\n  )\r\n  return {\r\n    cards,\r\n    clearCards,\r\n    addCard,\r\n    randomCards,\r\n    deleteLastCard,\r\n  }\r\n}\r\n\r\nexport function RankChooser({ rank, setRank }: RankState) {\r\n  return (\r\n    <View\r\n      style={{\r\n        flexDirection: 'row',\r\n      }}\r\n    >\r\n      <Text style={{ fontSize: 22, marginHorizontal: 6 }}>\r\n        当前打\r\n        <Picker\r\n          selectedValue={rank}\r\n          onValueChange={itemValue => setRank(itemValue)}\r\n        >\r\n          {RANKS.filter(rankOption => !rankOption.isJoker).map(rankOption => (\r\n            <Picker.Item\r\n              key={rankOption.value}\r\n              label={rankOption.label}\r\n              value={rankOption.value}\r\n            />\r\n          ))}\r\n        </Picker>{' '}\r\n        <Text style={{ color: SUIT.H.color }}>\r\n          {SUIT.H.label}\r\n          {RANK[rank].label}\r\n        </Text>\r\n        是百搭\r\n      </Text>\r\n    </View>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { View, StyleSheet } from 'react-native'\r\n\r\nconst styles = StyleSheet.create({\r\n  divider: {\r\n    height: 2.1, // avoid floating error\r\n    backgroundColor: 'black',\r\n  },\r\n})\r\n\r\nexport function Divider() {\r\n  return <View style={styles.divider} />\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { View, Text, ScrollView } from 'react-native'\r\nimport { SUIT, RANK } from './cardUtils'\r\nimport { TCard } from './types'\r\nimport { styles } from './CardsChooser'\r\n\r\nexport function Card({\r\n  rank,\r\n  suit,\r\n  isStacked,\r\n  disabled,\r\n}: TCard & {\r\n  isStacked?: boolean\r\n  disabled?: boolean\r\n}) {\r\n  const rankDef = RANK[rank]\r\n  const suitDef = SUIT[suit]\r\n  return (\r\n    <View style={[styles.card, isStacked && styles.cardStacked]}>\r\n      <Text\r\n        style={{\r\n          fontFamily: 'monospace',\r\n          fontSize: 16,\r\n          color: suitDef.color,\r\n          lineHeight: 16,\r\n          textAlign: 'center',\r\n          width: 20,\r\n          marginTop: 4,\r\n          fontWeight: 'bold',\r\n        }}\r\n      >\r\n        {rankDef.label === '10'\r\n          ? rankDef.label\r\n          : rankDef.label.split('').join('\\n')}\r\n        {'\\n'}\r\n        {suitDef.label}\r\n      </Text>\r\n      {disabled && (\r\n        <View\r\n          style={{\r\n            position: 'absolute',\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n          }}\r\n        />\r\n      )}\r\n    </View>\r\n  )\r\n}\r\n\r\ninterface CardDeckProps {\r\n  cards?: TCard[]\r\n  hands?: TCard[][]\r\n}\r\n\r\nexport const CardDeck: React.FunctionComponent<CardDeckProps> = ({\r\n  cards,\r\n  hands,\r\n}) => {\r\n  return (\r\n    <ScrollView\r\n      style={{\r\n        flex: 1,\r\n        minHeight: 60,\r\n      }}\r\n      contentContainerStyle={{\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n        paddingRight: 60,\r\n        paddingBottom: 60,\r\n        overflow: 'hidden',\r\n      }}\r\n    >\r\n      {!!cards &&\r\n        cards.map((card, index) => (\r\n          <Card key={card.rank + card.suit + index} {...card} isStacked />\r\n        ))}\r\n      {!!hands &&\r\n        hands.map((hand, handID) => {\r\n          const handNode = hand.map((card, cardID) => (\r\n            <Card key={card.rank + card.suit + cardID} {...card} isStacked />\r\n          ))\r\n\r\n          if (handID > 0) {\r\n            // add separator\r\n            return (\r\n              <Fragment key={handID}>\r\n                <View style={{ width: 16 }} />\r\n                <View style={{ flexDirection: 'row', flexWrap: 'nowrap' }}>\r\n                  {handNode}\r\n                </View>\r\n              </Fragment>\r\n            )\r\n          } else {\r\n            return handNode\r\n          }\r\n        })}\r\n    </ScrollView>\r\n  )\r\n}\r\n","import React, {\r\n  useState,\r\n  useCallback,\r\n  FunctionComponent,\r\n  ReactNode,\r\n} from 'react'\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  TouchableOpacityProps,\r\n  StyleProp,\r\n  TextStyle,\r\n  ScrollView,\r\n} from 'react-native'\r\nimport { RANKS, SUITS, SUITS_JOKER, canIAddCard } from './cardUtils'\r\nimport { CardState } from './types'\r\nimport { Divider } from './Divider'\r\nimport { CardDeck, Card } from './Card'\r\n\r\nconst palette = {\r\n  blue: 'rgb(33, 150, 243)',\r\n  grey: {\r\n    0: 'black',\r\n    4: 'rgb(161, 161, 161)',\r\n    6: 'rgb(223, 223, 223)',\r\n    8: 'white',\r\n  },\r\n}\r\n\r\nconst theme = {\r\n  disabled: {\r\n    background: palette.grey[6],\r\n    text: palette.grey[4],\r\n  },\r\n  button: {\r\n    background: palette.blue,\r\n  },\r\n}\r\n\r\nfunction useIncDecState(defaultValue = 0) {\r\n  const [value, setValue] = useState(defaultValue)\r\n  const increase = useCallback(() => setValue(valueNow => valueNow + 1), [\r\n    setValue,\r\n  ])\r\n  const decrease = useCallback(() => setValue(valueNow => valueNow - 1), [\r\n    setValue,\r\n  ])\r\n\r\n  return {\r\n    value,\r\n    increase,\r\n    decrease,\r\n  }\r\n}\r\n\r\ninterface MyButtonProps extends TouchableOpacityProps {\r\n  title: ReactNode\r\n  titleStyle?: StyleProp<TextStyle>\r\n}\r\n\r\nconst MyButton: FunctionComponent<MyButtonProps> = ({\r\n  style,\r\n  titleStyle,\r\n  title,\r\n  disabled,\r\n  ...restProps\r\n}) => (\r\n  <TouchableOpacity\r\n    style={[\r\n      {\r\n        backgroundColor: disabled\r\n          ? theme.disabled.background\r\n          : theme.button.background,\r\n        borderRadius: 2,\r\n        padding: 4,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      style,\r\n    ]}\r\n    disabled={disabled}\r\n    {...restProps}\r\n  >\r\n    <Text\r\n      style={[\r\n        {\r\n          color: disabled ? theme.disabled.text : 'white',\r\n          textAlign: 'center',\r\n        },\r\n        titleStyle,\r\n      ]}\r\n    >\r\n      {title}\r\n    </Text>\r\n  </TouchableOpacity>\r\n)\r\n\r\nconst controlStyles = StyleSheet.create({\r\n  incDecButton: {\r\n    flex: 2,\r\n    minWidth: 80,\r\n    maxWidth: 200,\r\n    margin: 6,\r\n  },\r\n  actionButton: {\r\n    flex: 1,\r\n    minWidth: 80,\r\n    maxWidth: 150,\r\n    margin: 6,\r\n  },\r\n  buttonTitle: {\r\n    fontSize: 30,\r\n  },\r\n  buttonTitleSmall: {\r\n    fontSize: 18,\r\n  },\r\n})\r\ninterface ControlPanelProps {\r\n  decRank: () => void\r\n  incRank: () => void\r\n  clearCards: () => void\r\n  randomCards: () => void\r\n  deleteLastCard: () => void\r\n  rankID: number\r\n  numberOfCards: number\r\n}\r\nconst ControlPanel: React.FunctionComponent<ControlPanelProps> = props => (\r\n  <View>\r\n    <View\r\n      style={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n      }}\r\n    >\r\n      <MyButton\r\n        onPress={props.randomCards}\r\n        title=\"随机发牌\"\r\n        disabled={props.numberOfCards > 0}\r\n        style={controlStyles.actionButton}\r\n        titleStyle={controlStyles.buttonTitleSmall}\r\n      />\r\n      <MyButton\r\n        onPress={props.clearCards}\r\n        title=\"清除\"\r\n        disabled={props.numberOfCards === 0}\r\n        style={controlStyles.actionButton}\r\n        titleStyle={controlStyles.buttonTitle}\r\n      />\r\n      <MyButton\r\n        onPress={props.decRank}\r\n        disabled={props.rankID <= 0}\r\n        title=\"<\"\r\n        style={controlStyles.incDecButton}\r\n        titleStyle={controlStyles.buttonTitle}\r\n      />\r\n      <MyButton\r\n        onPress={props.incRank}\r\n        title=\">\"\r\n        disabled={props.rankID >= RANKS.length - 1}\r\n        style={controlStyles.incDecButton}\r\n        titleStyle={controlStyles.buttonTitle}\r\n      />\r\n    </View>\r\n    <View\r\n      style={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n      }}\r\n    >\r\n      <MyButton\r\n        onPress={props.deleteLastCard}\r\n        title=\"删除最右\"\r\n        disabled={props.numberOfCards === 0}\r\n        style={controlStyles.actionButton}\r\n        titleStyle={controlStyles.buttonTitle}\r\n      />\r\n    </View>\r\n  </View>\r\n)\r\n\r\nexport function CardsChooser({\r\n  cards,\r\n  addCard,\r\n  clearCards,\r\n  randomCards,\r\n  deleteLastCard,\r\n}: CardState) {\r\n  const {\r\n    value: rankID,\r\n    increase: incRank,\r\n    decrease: decRank,\r\n  } = useIncDecState()\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <CardDeck cards={cards} />\r\n      <Divider />\r\n      <ScrollView\r\n        style={{ height: 110, flexGrow: 0 }}\r\n        contentContainerStyle={{\r\n          flex: 1,\r\n          justifyContent: 'center',\r\n        }}\r\n        horizontal\r\n      >\r\n        {(RANKS[rankID].isJoker ? SUITS_JOKER : SUITS).map(suit => {\r\n          const card = {\r\n            suit: suit.value,\r\n            rank: RANKS[rankID].value,\r\n          }\r\n          const canIAddThisCard = canIAddCard(cards, card)\r\n\r\n          return (\r\n            <TouchableOpacity\r\n              key={suit.value}\r\n              onPress={() => addCard(card)}\r\n              disabled={!canIAddThisCard}\r\n            >\r\n              <Card suit={suit.value} rank={RANKS[rankID].value} disabled={!canIAddThisCard}/>\r\n            </TouchableOpacity>\r\n          )\r\n        })}\r\n      </ScrollView>\r\n      <ControlPanel\r\n        numberOfCards={cards.length}\r\n        clearCards={clearCards}\r\n        randomCards={randomCards}\r\n        deleteLastCard={deleteLastCard}\r\n        rankID={rankID}\r\n        incRank={incRank}\r\n        decRank={decRank}\r\n      />\r\n    </View>\r\n  )\r\n}\r\n\r\nexport const styles = StyleSheet.create({\r\n  card: {\r\n    width: 80,\r\n    height: 60 * 1.618,\r\n    backgroundColor: 'white',\r\n    borderColor: 'black',\r\n    borderWidth: 2,\r\n    margin: 3,\r\n  },\r\n  cardStacked: {\r\n    marginRight: -60,\r\n    marginBottom: -60,\r\n  },\r\n})\r\n","import { CppModule, StrategyResult, vector2Array } from './loadCppModule'\r\n\r\nexport function portCppModule(cppModule: CppModule) {\r\n  return {\r\n    calc: (cards: string, mainRank: string): StrategyResult => {\r\n      const { minHands, solutions: originalSolutions } = cppModule.calc(\r\n        cards,\r\n        mainRank.charCodeAt(0),\r\n      )\r\n      const solutionsRaw = vector2Array(originalSolutions)\r\n\r\n      return {\r\n        minHands,\r\n        solutionsRaw,\r\n        solutions: parseSolutions(solutionsRaw),\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nconst cardRegex = /[0-9A-Z]{2}/\r\n\r\n// TODO: write this more elegantly\r\nexport function restoreWildCards(\r\n  hands: string[][],\r\n  usedWildCards: string[],\r\n  wildCard: string,\r\n): string[][] {\r\n  const wildCardsToUse = [...usedWildCards]\r\n  const restoredHands = [...hands]\r\n\r\n  hands.forEach((hand, handID) => {\r\n    hand.forEach((card, cardID) => {\r\n      if (wildCardsToUse.length > 0) {\r\n        const foundCardID = wildCardsToUse.indexOf(card)\r\n        if (foundCardID >= 0) {\r\n          wildCardsToUse.splice(foundCardID, 1)\r\n          const newHand = [...restoredHands[handID]]\r\n          newHand.splice(cardID, 1, wildCard)\r\n          restoredHands[handID] = newHand\r\n        }\r\n      }\r\n    })\r\n  })\r\n\r\n  if (wildCardsToUse.length > 0) {\r\n    throw new Error(\r\n      `Cannot find all wildcards, double check the data, hands = \"${hands}\", usedWildCards = \"${usedWildCards}\", wildCard=\"${wildCard}\"`,\r\n    )\r\n  }\r\n\r\n  return restoredHands\r\n}\r\n\r\nexport function parseSolutions(solutions: string[]) {\r\n  try {\r\n    return parseSolutionsUnsafe(solutions)\r\n  } catch (e) {\r\n    console.log(solutions)\r\n    throw e\r\n  }\r\n}\r\n\r\nexport function parseSolutionsUnsafe(solutions: string[]) {\r\n  const parsedSolutions = []\r\n  let wildCards: null | string[] = null\r\n\r\n  for (let i = 0; i < solutions.length; ++i) {\r\n    if (solutions[i].length === 0) {\r\n      throw new Error(\"solutions shouldn't have empty line: #\" + i)\r\n    }\r\n\r\n    if (solutions[i][0] === '-') {\r\n      // section of wild cards\r\n      const wildCardsRawStr = solutions[i]\r\n      wildCards = wildCardsRawStr.split(' ').filter(str => str.match(cardRegex))\r\n    } else {\r\n      // section of a solution\r\n      if (wildCards == null) {\r\n        throw new Error(\r\n          'wildcard definition should be before solution definition',\r\n        )\r\n      }\r\n\r\n      const handsRawStr = solutions[i]\r\n      const asHands = handsRawStr\r\n        .split('|')\r\n        .map(hand => hand.split(' ').filter(str => str.match(cardRegex)))\r\n        .filter(foundCards => foundCards.length > 0)\r\n      const actualHands = restoreWildCards(asHands, wildCards, '??')\r\n\r\n      parsedSolutions.push({\r\n        wildCards,\r\n        actualHands,\r\n        asHands,\r\n      })\r\n    }\r\n  }\r\n  console.log(parsedSolutions)\r\n\r\n  return parsedSolutions\r\n}\r\n","import { portCppModule } from './portCppModule'\r\n\r\ninterface VectorString {\r\n  size: () => number\r\n  get: (index: number) => string\r\n}\r\n\r\ninterface OriginalStrategyResult {\r\n  minHands: number\r\n  solutions: VectorString\r\n}\r\n\r\nexport type CardRaw = string\r\n\r\nexport type HandRaw = CardRaw[]\r\n\r\nexport interface StrategyResult {\r\n  minHands: number\r\n  solutionsRaw: string[]\r\n  solutions: {\r\n    wildCards: CardRaw[]\r\n    asHands: HandRaw[]\r\n    actualHands: HandRaw[]\r\n  }[]\r\n}\r\n\r\nexport interface CppModule {\r\n  onRuntimeInitialized: () => void\r\n  onAbort: () => void\r\n  add: (a: number, b: number) => number\r\n  calc: (cards: string, mainRank: number) => OriginalStrategyResult\r\n}\r\n\r\nexport interface PortedCppModule {\r\n  calc: (cards: string, mainRank: string) => StrategyResult\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    Module: CppModule\r\n  }\r\n}\r\n\r\nexport function vector2Array(vec: VectorString): string[] {\r\n  const arr = []\r\n  for (let i = 0; i < vec.size(); ++i) {\r\n    arr.push(vec.get(i))\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nexport function loadCppModule(): Promise<PortedCppModule> {\r\n  return new Promise((resolve, reject) => {\r\n    if (window.Module) {\r\n      return resolve(portCppModule(window.Module))\r\n    } else {\r\n      const s = document.createElement('script')\r\n      s.src = 'res/strategy.js'\r\n      s.onload = () => {\r\n        const cppModule = window.Module\r\n        cppModule.onRuntimeInitialized = () => {\r\n          resolve(portCppModule(window.Module))\r\n        }\r\n        cppModule.onAbort = () => {\r\n          reject('wasm module aborted during loading')\r\n        }\r\n      }\r\n      s.onerror = () => reject('wasm module failed to load')\r\n      document.body.appendChild(s)\r\n    }\r\n  })\r\n}\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport {\r\n  View,\r\n  Text,\r\n  Button,\r\n  ScrollView,\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n} from 'react-native'\r\nimport { NavigationProps, TCard } from './types'\r\nimport { CardsChooser } from './CardsChooser'\r\nimport { RankChooser } from './useCardState'\r\nimport {\r\n  loadCppModule,\r\n  PortedCppModule,\r\n  StrategyResult,\r\n  CardRaw,\r\n} from './loadCppModule'\r\nimport { Divider } from './Divider'\r\nimport { CardDeck } from './Card'\r\n\r\nlet strategyModule: PortedCppModule | null = null\r\n\r\nfunction cardsToString(cards: TCard[]) {\r\n  return cards\r\n    .map(card => {\r\n      if (card.rank === 'X') {\r\n        // big joker and small joker\r\n        return card.suit === 'R' ? 'BJ' : 'SJ'\r\n      }\r\n      return card.rank + card.suit\r\n    })\r\n    .join('')\r\n}\r\n\r\nfunction parseRawCard(cardRaw: CardRaw, wildCard: TCard): TCard {\r\n  if (cardRaw.length !== 2) {\r\n    throw new Error('CardRaw should have a length of 2')\r\n  }\r\n\r\n  if (cardRaw === 'BJ') {\r\n    return {\r\n      rank: 'X',\r\n      suit: 'R',\r\n    }\r\n  }\r\n  if (cardRaw === 'SJ') {\r\n    return {\r\n      rank: 'X',\r\n      suit: 'B',\r\n    }\r\n  }\r\n  if (cardRaw === '??') {\r\n    return wildCard\r\n  }\r\n\r\n  return {\r\n    rank: cardRaw[0],\r\n    suit: cardRaw[1],\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 10,\r\n  },\r\n  borderBox: {\r\n    borderWidth: 2,\r\n    borderColor: 'black',\r\n  },\r\n})\r\n\r\ninterface SolutionVisualizationProps {\r\n  strategyResult: StrategyResult | null | 'loading'\r\n  rank: string\r\n  isWindowMaxed: boolean\r\n  toggleWindowSize: () => void\r\n}\r\n\r\nconst SolutionVisualization: React.FunctionComponent<\r\n  SolutionVisualizationProps\r\n> = ({ strategyResult, rank, isWindowMaxed, toggleWindowSize }) => (\r\n  <>\r\n    <View\r\n      style={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-end',\r\n        alignContent: 'center',\r\n      }}\r\n    >\r\n      <View style={{ flex: 1 }}>\r\n        <Text\r\n          style={{\r\n            fontSize: 20,\r\n            padding: 4,\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          拆牌策略计算结果\r\n        </Text>\r\n      </View>\r\n      <View style={{ width: 2, backgroundColor: 'black' }} />\r\n      <TouchableOpacity\r\n        style={{\r\n          width: 40,\r\n          alignContent: 'center',\r\n          justifyContent: 'center',\r\n        }}\r\n        onPress={toggleWindowSize}\r\n      >\r\n        <Text style={{ textAlign: 'center' }}>{isWindowMaxed ? '🗕' : '🗖'}</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n    <Divider />\r\n    <ScrollView\r\n      style={[\r\n        styles.container,\r\n        {\r\n          flex: 2,\r\n        },\r\n      ]}\r\n    >\r\n      {strategyResult &&\r\n        (strategyResult === 'loading' ? (\r\n          <Text\r\n            style={{\r\n              fontSize: 20,\r\n            }}\r\n          >\r\n            计算中...\r\n          </Text>\r\n        ) : (\r\n          <>\r\n            <Text>{`最少${strategyResult.minHands}手可以出完`}</Text>\r\n            <View>\r\n              {strategyResult.solutions.map((solution, solutionIndex) => (\r\n                <CardDeck\r\n                  key={solutionIndex}\r\n                  hands={solution.actualHands.map(hand =>\r\n                    hand.map(card =>\r\n                      parseRawCard(card, {\r\n                        rank,\r\n                        suit: 'H',\r\n                      }),\r\n                    ),\r\n                  )}\r\n                />\r\n              ))}\r\n            </View>\r\n          </>\r\n        ))}\r\n    </ScrollView>\r\n  </>\r\n)\r\n\r\ntype StrategyResultState = null | 'loading' | StrategyResult\r\n\r\nexport function Home({ screenProps }: NavigationProps) {\r\n  useEffect(() => {\r\n    loadCppModule().then(cppModule => {\r\n      strategyModule = cppModule\r\n      // uncomment the following to test the module\r\n      // console.log(\r\n      //   strategyModule.calc(\r\n      //     'BJADKDJH0S0C0CAH8D7S7H4H4D4H3D3C2H9C7CAH6C5CKSQSJS0S9S',\r\n      //     'A',\r\n      //   ),\r\n      // )\r\n    })\r\n  }, [])\r\n\r\n  const {\r\n    rank,\r\n    setRank,\r\n    cards,\r\n    clearCards,\r\n    addCard,\r\n    randomCards,\r\n    deleteLastCard,\r\n  } = screenProps\r\n  const [strategyResult, setResult] = useState<StrategyResultState>(null)\r\n  const [isResultWindowMaxed, setResultWindowState] = useState<boolean>(false)\r\n  const toggleResultWindowSize = useCallback(\r\n    () => setResultWindowState(prevState => !prevState),\r\n    [setResultWindowState],\r\n  )\r\n\r\n  return (\r\n    <ScrollView\r\n      style={[styles.borderBox, { height: '100%' }]}\r\n      contentContainerStyle={{\r\n        height: '100%',\r\n      }}\r\n    >\r\n      <SolutionVisualization\r\n        strategyResult={strategyResult}\r\n        rank={rank}\r\n        isWindowMaxed={isResultWindowMaxed}\r\n        toggleWindowSize={toggleResultWindowSize}\r\n      />\r\n      {!isResultWindowMaxed && (\r\n        <>\r\n          <Divider />\r\n          <View\r\n            style={[\r\n              styles.container,\r\n              {\r\n                height: 40,\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n              },\r\n            ]}\r\n          >\r\n            <RankChooser rank={rank} setRank={setRank} />\r\n          </View>\r\n          <Divider />\r\n          <View\r\n            style={[\r\n              styles.container,\r\n              {\r\n                flex: 1,\r\n                minHeight: 350,\r\n              },\r\n            ]}\r\n          >\r\n            <CardsChooser\r\n              cards={cards}\r\n              addCard={addCard}\r\n              clearCards={clearCards}\r\n              randomCards={randomCards}\r\n              deleteLastCard={deleteLastCard}\r\n            />\r\n          </View>\r\n          <Divider />\r\n          <View\r\n            style={[\r\n              styles.container,\r\n              {\r\n                height: 34,\r\n                justifyContent: 'center',\r\n                padding: 0,\r\n              },\r\n            ]}\r\n          >\r\n            <Button\r\n              title=\"计算策略\"\r\n              onPress={() => {\r\n                setResult('loading')\r\n\r\n                setTimeout(() => {\r\n                  if (strategyModule != null) {\r\n                    const cardsStr = cardsToString(cards)\r\n                    console.log(cardsStr)\r\n                    setResult(strategyModule.calc(cardsStr, rank))\r\n                  }\r\n                }, 0)\r\n              }}\r\n            />\r\n          </View>\r\n        </>\r\n      )}\r\n    </ScrollView>\r\n  )\r\n}\r\n\r\nHome.navigationOptions = {\r\n  title: '掼蛋策略计算',\r\n}\r\n","/// <reference path=\"lib.d.ts\"/>\n\nimport React, { useState } from 'react'\nimport { View, Text, Button } from 'react-native'\nimport { createSwitchNavigator } from '@react-navigation/core'\nimport { createBrowserApp } from '@react-navigation/web'\nimport { NavigationProps } from './types'\nimport { useCardState } from './useCardState'\nimport { Home } from './Home'\n\nfunction Details(props: NavigationProps) {\n  return (\n    <View>\n      <Text>Details</Text>\n      <Button\n        title=\"Go to Home\"\n        onPress={() => props.navigation.navigate('Home')}\n      />\n    </View>\n  )\n}\n\nconst AppNavigator = createSwitchNavigator(\n  {\n    Home,\n    Details,\n  },\n  {\n    initialRouteName: 'Home',\n  },\n)\n\nfunction App(props: any) {\n  const [rank, setRank] = useState('2')\n  const cardStateProps = useCardState()\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        backgroundColor: 'lightblue',\n        height: '100%',\n      }}\n    >\n      <AppNavigator\n        screenProps={{ rank, setRank, ...cardStateProps }}\n        {...props}\n      />\n    </View>\n  )\n}\nApp.router = AppNavigator.router\n\nexport default createBrowserApp(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AppRegistry } from 'react-native'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nAppRegistry.registerComponent('App', () => App)\nAppRegistry.runApplication('App', {\n  rootTag: document.getElementById('root'),\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}