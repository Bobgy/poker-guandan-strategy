{"version":3,"sources":["constants.ts","useCardState.tsx","Divider.tsx","CardsChooser.tsx","loadCppModule.ts","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RANKS","value","label","isJoker","map","data","RANK","reduce","rankIndex","rank","SUIT","H","color","D","S","C","B","R","SUITS","SUITS_JOKER","RankChooser","_ref","setRank","react_default","a","createElement","View","style","flexDirection","Text","fontSize","marginHorizontal","Picker","selectedValue","onValueChange","itemValue","filter","rankOption","Item","key","styles","StyleSheet","create","divider","height","backgroundColor","Divider","palette","0","4","6","8","theme","disabled","background","text","button","Card","suit","isStacked","rankDef","suitDef","card","cardStacked","fontFamily","lineHeight","textAlign","width","marginTop","fontWeight","split","join","MyButton","_ref2","titleStyle","title","restProps","Object","objectWithoutProperties","TouchableOpacity","assign","borderRadius","padding","alignItems","justifyContent","controlStyles","incDecButton","flex","minWidth","maxWidth","margin","clearButton","buttonTitle","ControlPanel","props","alignContent","CardsChooser_MyButton","onPress","clearCards","numberOfCards","decRank","rankID","incRank","length","CardsChooser","_ref3","cards","addCard","_useIncDecState","defaultValue","arguments","undefined","_useState","useState","_useState2","slicedToArray","setValue","increase","useCallback","valueNow","decrease","useIncDecState","ScrollView","minHeight","contentContainerStyle","flexWrap","paddingRight","paddingBottom","overflow","index","flexGrow","horizontal","CardsChooser_ControlPanel","borderColor","borderWidth","marginRight","marginBottom","vector2Array","vec","arr","i","size","push","get","portCppModule","cppModule","calc","mainRank","_cppModule$calc","charCodeAt","minHands","solutions","strategyModule","container","borderBox","Home","screenProps","useEffect","Promise","resolve","reject","window","Module","s","document","src","onload","onRuntimeInitialized","onAbort","onerror","body","appendChild","then","strategyResult","setResult","Fragment","concat","Button","cardsStr","cardsToString","console","log","navigationOptions","AppNavigator","createSwitchNavigator","Details","navigation","navigate","initialRouteName","App","cardStateProps","setCards","cardsNow","useCardState","objectSpread","router","createBrowserApp","Boolean","location","hostname","match","AppRegistry","registerComponent","runApplication","rootTag","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f0251d6.chunk.js","sourcesContent":["export const RANKS = [\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  {\r\n    value: '0',\r\n    label: '10',\r\n    isJoker: false,\r\n  },\r\n  'J',\r\n  'Q',\r\n  'K',\r\n  'A',\r\n  {\r\n    value: 'X',\r\n    label: 'Joker',\r\n    isJoker: true,\r\n  },\r\n].map(data => {\r\n  if (typeof data === 'object') {\r\n    return data\r\n  } else {\r\n    const rank = data\r\n    return {\r\n      label: rank,\r\n      value: rank,\r\n      isJoker: false,\r\n    }\r\n  }\r\n})\r\ninterface RankIndex {\r\n  [rank: string]: {\r\n    value: string\r\n    label: string\r\n    isJoker: boolean\r\n  }\r\n}\r\nexport const RANK: RankIndex = RANKS.reduce((rankIndex: RankIndex, rank) => {\r\n  rankIndex[rank.value] = rank\r\n  return rankIndex\r\n}, {})\r\ninterface SuiteIndex {\r\n  [suit: string]: {\r\n    value: string\r\n    label: string\r\n    color: string\r\n  }\r\n}\r\nexport const SUIT: SuiteIndex = {\r\n  H: {\r\n    value: 'H',\r\n    label: '♥',\r\n    color: 'red',\r\n  },\r\n  D: {\r\n    value: 'D',\r\n    label: '♦',\r\n    color: 'red',\r\n  },\r\n  S: {\r\n    value: 'S',\r\n    label: '♠',\r\n    color: 'black',\r\n  },\r\n  C: {\r\n    value: 'C',\r\n    label: '♣',\r\n    color: 'black',\r\n  },\r\n  B: {\r\n    // black joker\r\n    value: 'B',\r\n    label: '',\r\n    color: 'black',\r\n  },\r\n  R: {\r\n    // red joker\r\n    value: 'R',\r\n    label: '',\r\n    color: 'red',\r\n  },\r\n}\r\nexport const SUITS = [SUIT.H, SUIT.S, SUIT.C, SUIT.D]\r\nexport const SUITS_JOKER = [SUIT.B, SUIT.R]\r\n","import React, { useState, useCallback } from 'react'\r\nimport { View, Text, Picker } from 'react-native'\r\nimport { RANKS, RANK, SUIT } from './constants'\r\nimport { CardState, RankState } from './types'\r\n\r\nexport function useCardState(): CardState {\r\n  const [cards, setCards] = useState([])\r\n  const clearCards = useCallback(() => setCards([]), [setCards])\r\n  const addCard = useCallback(\r\n    card => setCards(cardsNow => cardsNow.concat(card)),\r\n    [setCards],\r\n  )\r\n  return {\r\n    cards,\r\n    clearCards,\r\n    addCard,\r\n  }\r\n}\r\n\r\nexport function RankChooser({ rank, setRank }: RankState) {\r\n  return (\r\n    <View\r\n      style={{\r\n        flexDirection: 'row',\r\n      }}\r\n    >\r\n      <Text style={{ fontSize: 22, marginHorizontal: 6 }}>\r\n        当前打\r\n        <Picker\r\n          selectedValue={rank}\r\n          onValueChange={itemValue => setRank(itemValue)}\r\n        >\r\n          {RANKS.filter(rankOption => !rankOption.isJoker).map(rankOption => (\r\n            <Picker.Item\r\n              key={rankOption.value}\r\n              label={rankOption.label}\r\n              value={rankOption.value}\r\n            />\r\n          ))}\r\n        </Picker>{' '}\r\n        <Text style={{ color: SUIT.H.color }}>\r\n          {SUIT.H.label}\r\n          {RANK[rank].label}\r\n        </Text>\r\n        是百搭\r\n      </Text>\r\n    </View>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { View, StyleSheet } from 'react-native'\r\n\r\nconst styles = StyleSheet.create({\r\n  divider: {\r\n    height: 2,\r\n    backgroundColor: 'black',\r\n  },\r\n})\r\n\r\nexport function Divider() {\r\n  return <View style={styles.divider} />\r\n}\r\n","import React, {\r\n  useState,\r\n  useCallback,\r\n  FunctionComponent,\r\n  ReactNode,\r\n} from 'react'\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  TouchableOpacityProps,\r\n  StyleProp,\r\n  TextStyle,\r\n  ScrollView,\r\n} from 'react-native'\r\nimport { RANKS, SUIT, RANK, SUITS, SUITS_JOKER } from './constants'\r\nimport { CardState, TCard } from './types'\r\nimport { Divider } from './Divider'\r\n\r\nconst palette = {\r\n  blue: 'rgb(33, 150, 243)',\r\n  grey: {\r\n    0: 'black',\r\n    4: 'rgb(161, 161, 161)',\r\n    6: 'rgb(223, 223, 223)',\r\n    8: 'white',\r\n  },\r\n}\r\n\r\nconst theme = {\r\n  disabled: {\r\n    background: palette.grey[6],\r\n    text: palette.grey[4],\r\n  },\r\n  button: {\r\n    background: palette.blue,\r\n  },\r\n}\r\n\r\nfunction useIncDecState(defaultValue = 0) {\r\n  const [value, setValue] = useState(defaultValue)\r\n  const increase = useCallback(() => setValue(valueNow => valueNow + 1), [\r\n    setValue,\r\n  ])\r\n  const decrease = useCallback(() => setValue(valueNow => valueNow - 1), [\r\n    setValue,\r\n  ])\r\n\r\n  return {\r\n    value,\r\n    increase,\r\n    decrease,\r\n  }\r\n}\r\n\r\nfunction Card({ rank, suit, isStacked }: TCard & { isStacked?: boolean }) {\r\n  const rankDef = RANK[rank]\r\n  const suitDef = SUIT[suit]\r\n\r\n  return (\r\n    <View style={[styles.card, isStacked && styles.cardStacked]}>\r\n      <Text\r\n        style={{\r\n          fontFamily: 'monospace',\r\n          fontSize: 16,\r\n          color: suitDef.color,\r\n          lineHeight: 16,\r\n          textAlign: 'center',\r\n          width: 20,\r\n          marginTop: 4,\r\n          fontWeight: 'bold',\r\n        }}\r\n      >\r\n        {rankDef.label === '10'\r\n          ? rankDef.label\r\n          : rankDef.label.split('').join('\\n')}\r\n        {'\\n'}\r\n        {suitDef.label}\r\n      </Text>\r\n    </View>\r\n  )\r\n}\r\n\r\ninterface MyButtonProps extends TouchableOpacityProps {\r\n  title: ReactNode\r\n  titleStyle?: StyleProp<TextStyle>\r\n}\r\n\r\nconst MyButton: FunctionComponent<MyButtonProps> = ({\r\n  style,\r\n  titleStyle,\r\n  title,\r\n  disabled,\r\n  ...restProps\r\n}) => (\r\n  <TouchableOpacity\r\n    style={[\r\n      {\r\n        backgroundColor: disabled\r\n          ? theme.disabled.background\r\n          : theme.button.background,\r\n        borderRadius: 2,\r\n        padding: 4,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      style,\r\n    ]}\r\n    disabled={disabled}\r\n    {...restProps}\r\n  >\r\n    <Text\r\n      style={[\r\n        {\r\n          color: disabled ? theme.disabled.text : 'white',\r\n        },\r\n        titleStyle,\r\n      ]}\r\n    >\r\n      {title}\r\n    </Text>\r\n  </TouchableOpacity>\r\n)\r\n\r\nconst controlStyles = StyleSheet.create({\r\n  incDecButton: {\r\n    flex: 2,\r\n    minWidth: 100,\r\n    maxWidth: 200,\r\n    margin: 10,\r\n  },\r\n  clearButton: {\r\n    flex: 1,\r\n    minWidth: 100,\r\n    maxWidth: 150,\r\n    margin: 10,\r\n  },\r\n  buttonTitle: {\r\n    fontSize: 30,\r\n  },\r\n})\r\ninterface ControlPanelProps {\r\n  decRank: () => void\r\n  incRank: () => void\r\n  clearCards: () => void\r\n  rankID: number\r\n  numberOfCards: number\r\n}\r\nconst ControlPanel: React.FunctionComponent<ControlPanelProps> = props => (\r\n  <View\r\n    style={{\r\n      flexDirection: 'row',\r\n      justifyContent: 'center',\r\n      alignContent: 'center',\r\n    }}\r\n  >\r\n    <MyButton\r\n      onPress={props.clearCards}\r\n      title=\"清除\"\r\n      disabled={props.numberOfCards === 0}\r\n      style={controlStyles.clearButton}\r\n      titleStyle={controlStyles.buttonTitle}\r\n    />\r\n    <MyButton\r\n      onPress={props.decRank}\r\n      disabled={props.rankID <= 0}\r\n      title=\"<\"\r\n      style={controlStyles.incDecButton}\r\n      titleStyle={controlStyles.buttonTitle}\r\n    />\r\n    <MyButton\r\n      onPress={props.incRank}\r\n      title=\">\"\r\n      disabled={props.rankID >= RANKS.length - 1}\r\n      style={controlStyles.incDecButton}\r\n      titleStyle={controlStyles.buttonTitle}\r\n    />\r\n  </View>\r\n)\r\n\r\nexport function CardsChooser({ cards, addCard, clearCards }: CardState) {\r\n  const {\r\n    value: rankID,\r\n    increase: incRank,\r\n    decrease: decRank,\r\n  } = useIncDecState()\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <ScrollView\r\n        style={{\r\n          flex: 1,\r\n          minHeight: 60,\r\n        }}\r\n        contentContainerStyle={{\r\n          flexWrap: 'wrap',\r\n          flexDirection: 'row',\r\n          paddingRight: 60,\r\n          paddingBottom: 60,\r\n          overflow: 'hidden',\r\n        }}\r\n      >\r\n        {cards.map((card, index) => (\r\n          <Card key={card.rank + card.suit + index} {...card} isStacked />\r\n        ))}\r\n      </ScrollView>\r\n      <Divider />\r\n      <ScrollView\r\n        style={{ height: 110, flexGrow: 0 }}\r\n        contentContainerStyle={{\r\n          flex: 1,\r\n          justifyContent: 'center',\r\n        }}\r\n        horizontal\r\n      >\r\n        {(RANKS[rankID].isJoker ? SUITS_JOKER : SUITS).map(suit => (\r\n          <TouchableOpacity\r\n            key={suit.value}\r\n            onPress={() =>\r\n              addCard({\r\n                suit: suit.value,\r\n                rank: RANKS[rankID].value,\r\n              })\r\n            }\r\n          >\r\n            <Card suit={suit.value} rank={RANKS[rankID].value} />\r\n          </TouchableOpacity>\r\n        ))}\r\n      </ScrollView>\r\n      <ControlPanel\r\n        numberOfCards={cards.length}\r\n        clearCards={clearCards}\r\n        rankID={rankID}\r\n        incRank={incRank}\r\n        decRank={decRank}\r\n      />\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  card: {\r\n    width: 80,\r\n    height: 60 * 1.618,\r\n    backgroundColor: 'white',\r\n    borderColor: 'black',\r\n    borderWidth: 2,\r\n    margin: 3,\r\n  },\r\n  cardStacked: {\r\n    marginRight: -60,\r\n    marginBottom: -60,\r\n  },\r\n})\r\n","import { TCard } from './types'\r\n\r\ninterface VectorString {\r\n  size: () => number\r\n  get: (index: number) => string\r\n}\r\n\r\ninterface OriginalStrategyResult {\r\n  minHands: number\r\n  solutions: VectorString\r\n}\r\n\r\nexport interface StrategyResult {\r\n  minHands: number\r\n  solutions: string[]\r\n}\r\n\r\ninterface CppModule {\r\n  onRuntimeInitialized: () => void\r\n  onAbort: () => void\r\n  add: (a: number, b: number) => number\r\n  calc: (cards: string, mainRank: number) => OriginalStrategyResult\r\n}\r\n\r\nexport interface PortedCppModule {\r\n  calc: (cards: string, mainRank: string) => StrategyResult\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    Module: CppModule\r\n  }\r\n}\r\n\r\nfunction vector2Array(vec: VectorString): string[] {\r\n  const arr = []\r\n  for (let i = 0; i < vec.size(); ++i) {\r\n    arr.push(vec.get(i))\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nfunction portCppModule(cppModule: CppModule) {\r\n  return {\r\n    calc: (cards: string, mainRank: string): StrategyResult => {\r\n      const { minHands, solutions: originalSolutions } = cppModule.calc(\r\n        cards,\r\n        mainRank.charCodeAt(0),\r\n      )\r\n\r\n      return {\r\n        minHands,\r\n        solutions: vector2Array(originalSolutions),\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport function loadCppModule(): Promise<PortedCppModule> {\r\n  return new Promise((resolve, reject) => {\r\n    if (window.Module) {\r\n      return resolve(portCppModule(window.Module))\r\n    } else {\r\n      const s = document.createElement('script')\r\n      s.src = 'res/strategy.js'\r\n      s.onload = () => {\r\n        const cppModule = window.Module\r\n        cppModule.onRuntimeInitialized = () => {\r\n          resolve(portCppModule(window.Module))\r\n        }\r\n        cppModule.onAbort = () => {\r\n          reject('wasm module aborted during loading')\r\n        }\r\n      }\r\n      s.onerror = () => reject('wasm module failed to load')\r\n      document.body.appendChild(s)\r\n    }\r\n  })\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { View, Text, Button, ScrollView, StyleSheet } from 'react-native'\r\nimport { NavigationProps, TCard } from './types'\r\nimport { CardsChooser } from './CardsChooser'\r\nimport { RankChooser } from './useCardState'\r\nimport { loadCppModule, PortedCppModule, StrategyResult } from './loadCppModule'\r\nimport { Divider } from './Divider'\r\n\r\nlet strategyModule: PortedCppModule | null = null\r\n\r\nfunction cardsToString(cards: TCard[]) {\r\n  return cards\r\n    .map(card => {\r\n      if (card.rank === 'X') {\r\n        // big joker and small joker\r\n        return card.suit === 'R' ? 'BJ' : 'SJ'\r\n      }\r\n      return card.rank + card.suit\r\n    })\r\n    .join('')\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 10,\r\n  },\r\n  borderBox: {\r\n    borderWidth: 2,\r\n    borderColor: 'black',\r\n  },\r\n})\r\n\r\nexport function Home({ screenProps }: NavigationProps) {\r\n  useEffect(() => {\r\n    loadCppModule().then(cppModule => {\r\n      strategyModule = cppModule\r\n      // uncomment the following to test the module\r\n      // console.log(\r\n      //   strategyModule.calc(\r\n      //     'BJADKDJH0S0C0CAH8D7S7H4H4D4H3D3C2H9C7CAH6C5CKSQSJS0S9S',\r\n      //     'A',\r\n      //   ),\r\n      // )\r\n    })\r\n  }, [])\r\n  const { rank, setRank, cards, clearCards, addCard } = screenProps\r\n  const [strategyResult, setResult]: [\r\n    null | StrategyResult,\r\n    (result: StrategyResult) => void\r\n  ] = useState(null) as any\r\n  return (\r\n    <ScrollView\r\n      style={[styles.borderBox, { height: '100%' }]}\r\n      contentContainerStyle={{\r\n        height: '100%',\r\n      }}\r\n    >\r\n      <Text style={{ fontSize: 20, padding: 4, textAlign: 'center' }}>\r\n        拆牌策略计算结果\r\n      </Text>\r\n      <Divider />\r\n      <ScrollView\r\n        style={[\r\n          styles.container,\r\n          {\r\n            flex: 1,\r\n          },\r\n        ]}\r\n      >\r\n        {strategyResult && (\r\n          <>\r\n            <Text>{`最少${strategyResult.minHands}手可以出完`}</Text>\r\n            <Text>{strategyResult.solutions.join('\\n')}</Text>\r\n          </>\r\n        )}\r\n      </ScrollView>\r\n      <Divider />\r\n      <View\r\n        style={[\r\n          styles.container,\r\n          {\r\n            height: 40,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n          },\r\n        ]}\r\n      >\r\n        <RankChooser rank={rank} setRank={setRank} />\r\n      </View>\r\n      <Divider />\r\n      <View\r\n        style={[\r\n          styles.container,\r\n          {\r\n            flex: 3,\r\n          },\r\n        ]}\r\n      >\r\n        <CardsChooser cards={cards} addCard={addCard} clearCards={clearCards} />\r\n      </View>\r\n      <Divider />\r\n      <View\r\n        style={[\r\n          styles.container,\r\n          {\r\n            height: 34,\r\n            justifyContent: 'center',\r\n            padding: 0,\r\n          },\r\n        ]}\r\n      >\r\n        <Button\r\n          title=\"计算策略\"\r\n          onPress={() => {\r\n            if (strategyModule != null) {\r\n              const cardsStr = cardsToString(cards)\r\n              console.log(cardsStr)\r\n              setResult(strategyModule.calc(cardsStr, rank))\r\n            }\r\n          }}\r\n        />\r\n      </View>\r\n    </ScrollView>\r\n  )\r\n}\r\n\r\nHome.navigationOptions = {\r\n  title: '掼蛋策略计算',\r\n}\r\n","/// <reference path=\"lib.d.ts\"/>\n\nimport React, { useState } from 'react'\nimport { View, Text, Button } from 'react-native'\nimport { createSwitchNavigator } from '@react-navigation/core'\nimport { createBrowserApp } from '@react-navigation/web'\nimport { NavigationProps } from './types'\nimport { useCardState } from './useCardState'\nimport { Home } from './Home'\n\nfunction Details(props: NavigationProps) {\n  return (\n    <View>\n      <Text>Details</Text>\n      <Button\n        title=\"Go to Home\"\n        onPress={() => props.navigation.navigate('Home')}\n      />\n    </View>\n  )\n}\n\nconst AppNavigator = createSwitchNavigator(\n  {\n    Home,\n    Details,\n  },\n  {\n    initialRouteName: 'Home',\n  },\n)\n\nfunction App(props: any) {\n  const [rank, setRank] = useState('2')\n  const cardStateProps = useCardState()\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        backgroundColor: 'lightblue',\n        height: '100%',\n      }}\n    >\n      <AppNavigator\n        screenProps={{ rank, setRank, ...cardStateProps }}\n        {...props}\n      />\n    </View>\n  )\n}\nApp.router = AppNavigator.router\n\nexport default createBrowserApp(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AppRegistry } from 'react-native'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nAppRegistry.registerComponent('App', () => App)\nAppRegistry.runApplication('App', {\n  rootTag: document.getElementById('root'),\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}